/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.gsom.ui;

import com.gsom.core.GSOMRun;
import com.gsom.listeners.GSOMRunListener;
import com.gsom.objects.GCluster;
import com.gsom.objects.GNode;
import com.gsom.util.Utils;
import java.awt.Color;
import java.awt.GradientPaint;
import java.awt.Paint;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.labels.CustomXYToolTipGenerator;
import org.jfree.chart.labels.XYToolTipGenerator;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYDotRenderer;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.util.ShapeUtilities;
import sun.java2d.pipe.SolidTextRenderer;

/**
 *
 * @author Thush
 */
public class MainWindow extends javax.swing.JFrame implements GSOMRunListener{

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
    }

    private ArrayList<Color> getColorArray(int count) {
        ArrayList<Color> plotColors = new ArrayList<Color>();
        
        plotColors.add(new Color(0,0,0));
        
        int[] rgb = new int[3];
        for(int j=0;j<3;j++){
                rgb[j]=0;
            }
        //int incrementVal = 40;
        for(int i=0;i<3;i++){
            
            rgb[i]=255;
            plotColors.add(new Color(rgb[0],rgb[1],rgb[2]));
            if(plotColors.size()==count){
                return plotColors;
            }
            rgb[i]=0;
        }
        
        for(int j=0;j<3;j++){
                rgb[j]=0;
            }
        
        for(int i=0;i<3;i++){
            
            rgb[i]=255;
            
            for(int j=0;j<3;j++){
                rgb[j]=255;
                if(i!=j){
                    plotColors.add(new Color(rgb[0],rgb[1],rgb[2]));
                }
                rgb[j]=0;
                if(plotColors.size()==count){
                    return plotColors;
                }
            }
            rgb[i]=0;
        }
        
        
        return plotColors;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        trainButton = new javax.swing.JButton();
        plotMapBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        statusTextArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        trainButton.setText("Train GSOM");
        trainButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trainButtonActionPerformed(evt);
            }
        });

        plotMapBtn.setText("Plot Results");
        plotMapBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plotMapBtnActionPerformed(evt);
            }
        });

        statusTextArea.setColumns(20);
        statusTextArea.setRows(5);
        jScrollPane1.setViewportView(statusTextArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(100, 100, 100)
                        .addComponent(trainButton)
                        .addGap(18, 18, 18)
                        .addComponent(plotMapBtn)
                        .addGap(0, 94, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(trainButton)
                    .addComponent(plotMapBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void trainButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trainButtonActionPerformed
        gRun = new GSOMRun(this);
        gRun.runTraining();
        
    }//GEN-LAST:event_trainButtonActionPerformed

    private void plotMapBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plotMapBtnActionPerformed
        createTheXYPlot(gRun.getGSOMMap(),gRun.getTestResultMap(),gRun.getClusters());
    }//GEN-LAST:event_plotMapBtnActionPerformed

    private GSOMRun gRun;
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new MainWindow().setVisible(true);
                
            }
        });
    }
    
    public static void updateTextArea(String str){
        
    }
    
    private void createTheXYPlot(Map<String,GNode> map,final Map<String,String> testResults,ArrayList<GCluster> clusters){
        ArrayList<Color> plotColors = getColorArray(12);
       
        XYToolTipGenerator tipGen = new XYToolTipGenerator() {

            @Override
            public String generateToolTip(XYDataset xyd, int i1, int i2) {
                int dX =(int)xyd.getXValue(i1, i2);
                int dY = (int)xyd.getYValue(i1, i2);
                String str = testResults.get(Utils.generateIndexString(dX,dY));
                //if(str==null){
                   //String str = "Dummy Node";
                //}
                return str;
            }
        };
               
        XYLineAndShapeRenderer nonHitRend = new XYLineAndShapeRenderer();
        nonHitRend.setSeriesPaint(0, new Color(0, 0, 0));
        nonHitRend.setBaseLinesVisible(false);
        
        ArrayList<XYSeries> seriesSet = new ArrayList<XYSeries>();
        
        /*
        // identify non-hit nodes first
        XYSeries nonHitSeries = new XYSeries("Non-hit nodes");
        for(GNode node : map.values()){
            if(!testResults.containsKey(Utils.generateIndexString(node.getX(), node.getY()))){
                nonHitSeries.add(node.getX(),node.getY());
            }
        }
        seriesSet.add(nonHitSeries);*/
        
        int idx=0;
        for(GCluster cluster:clusters){
            XYSeries temp = new XYSeries("cluster"+idx);
            for(GNode node:cluster.getcNodes()){
                //if(testResults.containsKey(Utils.generateIndexString(node.getX(), node.getY()))){
                    temp.add(node.getX(),node.getY());
                //}
            }
            seriesSet.add(temp);
            idx++;
        }
        
        ArrayList<XYDataset> dataset = new ArrayList<XYDataset>();
        for(XYSeries series : seriesSet){
            dataset.add(new XYSeriesCollection(series));
        }
        
        //XYDataset nonHitDataset = new XYSeriesCollection(nonHitSeries);
        
        JFreeChart chart = ChartFactory.createScatterPlot("GSOM Network", "X", "Y", null, PlotOrientation.HORIZONTAL, false, true,false);
  
        XYPlot plot = (XYPlot) chart.getPlot();
        
        
        
        
        for(int j=0;j<dataset.size();j++){    
            
            XYLineAndShapeRenderer rend = new XYLineAndShapeRenderer();
            rend.setBaseToolTipGenerator(tipGen);    
            rend.setBaseLinesVisible(false);
            //rend.setSeriesPaint(0, plotColors.get(j));            
            //rend.setSeriesPaint(1, plotColors.get(j));            
            rend.setSeriesShape(0, ShapeUtilities.createDiagonalCross(3, .3f));
            plot.setDataset(j, dataset.get(j));
            plot.setRenderer(j,rend);
            
            
        }
              
        
        //plot.setDataset(1,nonHitDataset);
        //plot.setRenderer(1,nonHitRend);
        
        ChartFrame cFrame = new ChartFrame("GSOM Network", chart);
        cFrame.setSize(450,500);
        cFrame.setVisible(true);
    }
    
    private void createTheXYPlotHitAndNonHit(Map<String,GNode> map,final Map<String,String> testResults){
       
        XYToolTipGenerator tipGen = new XYToolTipGenerator() {

            @Override
            public String generateToolTip(XYDataset xyd, int i1, int i2) {
                int dX =(int)xyd.getXValue(i1, i2);
                int dY = (int)xyd.getYValue(i1, i2);
                String str = testResults.get(Utils.generateIndexString(dX,dY));
               
                return str;
            }
        };
               
        XYLineAndShapeRenderer rend = new XYLineAndShapeRenderer();
        rend.setSeriesPaint(0, Color.black);
        rend.setSeriesPaint(1, Color.red);
        rend.setBaseLinesVisible(false);
        
        XYSeries hitSeries = new XYSeries("Hit nodes");
        XYSeries nonHitSeries = new XYSeries("Non-hit nodes");
        
        // identify non-hit nodes first
        for(GNode node : map.values()){
            if(!testResults.containsKey(Utils.generateIndexString(node.getX(), node.getY()))){
                nonHitSeries.add(node.getX(),node.getY());
            }else{
                hitSeries.add(node.getX(),node.getY());
            }
        }
        
        XYDataset hDataset = new XYSeriesCollection(hitSeries);
        XYDataset nhDataset = new XYSeriesCollection(nonHitSeries);
        
        JFreeChart chart = ChartFactory.createScatterPlot("GSOM Network", "X", "Y", null, PlotOrientation.HORIZONTAL, false, true,false);
  
        XYPlot plot = (XYPlot) chart.getPlot();
        
        rend.setSeriesShape(0, ShapeUtilities.createDiagonalCross(3, .3f));
        plot.setDataset(0, hDataset);
        plot.setDataset(1,nhDataset);
        plot.setRenderer(0,rend);
        plot.setRenderer(1,rend);
            
        ChartFrame cFrame = new ChartFrame("GSOM Network", chart);
        cFrame.setSize(450,500);
        cFrame.setVisible(true);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton plotMapBtn;
    private javax.swing.JTextArea statusTextArea;
    private javax.swing.JButton trainButton;
    // End of variables declaration//GEN-END:variables

    @Override
    public void stepCompleted(String str) {
        statusTextArea.append(str+"\n");
    }
}
